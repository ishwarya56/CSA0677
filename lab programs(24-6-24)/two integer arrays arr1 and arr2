#include <stdio.h>
#include <stdlib.h>
#include <limits.h>

// Compare function for qsort
int compare(const void *a, const void *b) {
    return ((int)a - (int)b);
}

// Binary search function to find the first element greater than key
int upper_bound(int* arr, int size, int key) {
    int left = 0, right = size;
    while (left < right) {
        int mid = (left + right) / 2;
        if (arr[mid] <= key) {
            left = mid + 1;
        } else {
            right = mid;
        }
    }
    return left;
}

int minOperations(int* arr1, int arr1Size, int* arr2, int arr2Size) {
    qsort(arr2, arr2Size, sizeof(int), compare);

    int dp[arr1Size + 1][arr1Size + 1];
    for (int i = 0; i <= arr1Size; ++i) {
        for (int j = 0; j <= arr1Size; ++j) {
            dp[i][j] = INT_MAX;
        }
    }
    dp[0][0] = INT_MIN;

    for (int i = 1; i <= arr1Size; ++i) {
        for (int j = 0; j <= i; ++j) {
            if (dp[i - 1][j] < arr1[i - 1]) {
                dp[i][j] = arr1[i - 1];
            }
            if (j > 0) {
                int idx = upper_bound(arr2, arr2Size, dp[i - 1][j - 1]);
                if (idx < arr2Size) {
                    dp[i][j] = dp[i][j] < arr2[idx] ? dp[i][j] : arr2[idx];
                }
            }
        }
    }

    for (int j = 0; j <= arr1Size; ++j) {
        if (dp[arr1Size][j] != INT_MAX) {
            return j;
        }
    }

    return -1;
}

int main() {
    int arr1[] = {1, 5, 3, 6, 7};
    int arr2[] = {1, 3, 2, 4};
    int arr1Size = sizeof(arr1) / sizeof(arr1[0]);
    int arr2Size = sizeof(arr2) / sizeof(arr2[0]);

    int result = minOperations(arr1, arr1Size, arr2, arr2Size);
    printf("The minimum number of operations needed: %d\n", result); // Output: 1

    return 0;
}
