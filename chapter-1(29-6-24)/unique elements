#include <stdio.h>
#include <stdlib.h>

// Hash table to track unique elements
typedef struct {
    int *table;
    int size;
} HashTable;

// Function to create a new hash table
HashTable* createHashTable(int size) {
    HashTable *hashTable = (HashTable *)malloc(sizeof(HashTable));
    hashTable->size = size;
    hashTable->table = (int *)calloc(size, sizeof(int));
    return hashTable;
}

// Function to insert an element into the hash table
int insertHashTable(HashTable *hashTable, int element) {
    int index = abs(element) % hashTable->size;
    while (hashTable->table[index] != 0) {
        if (hashTable->table[index] == element) {
            return 0; // Element already exists
        }
        index = (index + 1) % hashTable->size;
    }
    hashTable->table[index] = element;
    return 1; // Element inserted successfully
}

// Function to free the hash table
void freeHashTable(HashTable *hashTable) {
    free(hashTable->table);
    free(hashTable);
}

// Function to create a new list of unique elements
int* uniqueElements(int *nums, int size, int *uniqueSize) {
    HashTable *hashTable = createHashTable(size);
    int *uniqueNums = (int *)malloc(size * sizeof(int));
    *uniqueSize = 0;

    for (int i = 0; i < size; i++) {
        if (insertHashTable(hashTable, nums[i])) {
            uniqueNums[*uniqueSize] = nums[i];
            (*uniqueSize)++;
        }
    }

    freeHashTable(hashTable);
    return uniqueNums;
}

int main() {
    // Test Case 1: Some Duplicate Elements
    int nums1[] = {3, 7, 3, 5, 2, 5, 9, 2};
    int size1 = sizeof(nums1) / sizeof(nums1[0]);
    int uniqueSize1;
    int *uniqueNums1 = uniqueElements(nums1, size1, &uniqueSize1);
    printf("Test Case 1 Output: ");
    for (int i = 0; i < uniqueSize1; i++) {
        printf("%d ", uniqueNums1[i]);
    }
    printf("\n");
    free(uniqueNums1);

    // Test Case 2: Negative and Positive Numbers
    int nums2[] = {-1, 2, -1, 3, 2, -2};
    int size2 = sizeof(nums2) / sizeof(nums2[0]);
    int uniqueSize2;
    int *uniqueNums2 = uniqueElements(nums2, size2, &uniqueSize2);
    printf("Test Case 2 Output: ");
    for (int i = 0; i < uniqueSize2; i++) {
        printf("%d ", uniqueNums2[i]);
    }
    printf("\n");
    free(uniqueNums2);

    // Test Case 3: List with Large Numbers
    int nums3[] = {1000000, 999999, 1000000};
    int size3 = sizeof(nums3) / sizeof(nums3[0]);
    int uniqueSize3;
    int *uniqueNums3 = uniqueElements(nums3, size3, &uniqueSize3);
    printf("Test Case 3 Output: ");
    for (int i = 0; i < uniqueSize3; i++) {
        printf("%d ", uniqueNums3[i]);
    }
    printf("\n");
    free(uniqueNums3);

    return 0;
}
