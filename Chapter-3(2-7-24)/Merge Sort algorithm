#include <stdio.h>

int comparisonCount = 0;

// Function to merge two subarrays of arr[]
void merge(int arr[], int left, int mid, int right) {
    int n1 = mid - left + 1;
    int n2 = right - mid;

    int L[n1], R[n2];

    for (int i = 0; i < n1; i++)
        L[i] = arr[left + i];
    for (int j = 0; j < n2; j++)
        R[j] = arr[mid + 1 + j];

    int i = 0, j = 0, k = left;
    while (i < n1 && j < n2) {
        comparisonCount++;
        if (L[i] <= R[j]) {
            arr[k] = L[i];
            i++;
        } else {
            arr[k] = R[j];
            j++;
        }
        k++;
    }

    while (i < n1) {
        arr[k] = L[i];
        i++;
        k++;
    }

    while (j < n2) {
        arr[k] = R[j];
        j++;
        k++;
    }
}

// Function to implement Merge Sort
void mergeSort(int arr[], int left, int right) {
    if (left < right) {
        int mid = left + (right - left) / 2;

        mergeSort(arr, left, mid);
        mergeSort(arr, mid + 1, right);
        merge(arr, left, mid, right);
    }
}

int main() {
    int arr1[] = {12, 4, 78, 23, 45, 67, 89, 1};
    int arr2[] = {38, 27, 43, 3, 9, 82, 10};
    int n1 = sizeof(arr1) / sizeof(arr1[0]);
    int n2 = sizeof(arr2) / sizeof(arr2[0]);

    mergeSort(arr1, 0, n1 - 1);
    printf("Test Case 1: ");
    for (int i = 0; i < n1; i++)
        printf("%d ", arr1[i]);
    printf("\nComparisons: %d\n", comparisonCount);

    comparisonCount = 0; // Reset comparison count for the next test case
    mergeSort(arr2, 0, n2 - 1);
    printf("Test Case 2: ");
    for (int i = 0; i < n2; i++)
        printf("%d ", arr2[i]);
    printf("\nComparisons: %d\n", comparisonCount);

    return 0;
}
