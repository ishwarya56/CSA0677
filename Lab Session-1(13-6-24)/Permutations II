#include <stdio.h>
#include <stdlib.h>

int compare(const void *a, const void *b) {
    return (*(int*)a - *(int*)b);
}

void backtrack(int* nums, int numsSize, int* used, int* path, int pathLen, int** result, int* resultSize) {
    if (pathLen == numsSize) {
        result[(*resultSize)] = (int*)malloc(numsSize * sizeof(int));
        for (int i = 0; i < numsSize; i++) {
            result[(*resultSize)][i] = path[i];
        }
        (*resultSize)++;
        return;
    }

    for (int i = 0; i < numsSize; i++) {
        if (used[i] || (i > 0 && nums[i] == nums[i - 1] && !used[i - 1])) {
            continue;
        }
        used[i] = 1;
        path[pathLen] = nums[i];
        backtrack(nums, numsSize, used, path, pathLen + 1, result, resultSize);
        used[i] = 0;
    }
}

int** permuteUnique(int* nums, int numsSize, int* returnSize, int** returnColumnSizes) {
    qsort(nums, numsSize, sizeof(int), compare);
    int** result = (int**)malloc(10000 * sizeof(int*));
    int* used = (int*)calloc(numsSize, sizeof(int));
    int* path = (int*)malloc(numsSize * sizeof(int));
    *returnSize = 0;
    backtrack(nums, numsSize, used, path, 0, result, returnSize);
    *returnColumnSizes = (int*)malloc((*returnSize) * sizeof(int));
    for (int i = 0; i < (*returnSize); i++) {
        (*returnColumnSizes)[i] = numsSize;
    }
    return result;
}

int main() {
    int nums[] = {1, 1, 2};
    int returnSize;
    int* returnColumnSizes;
    int** result = permuteUnique(nums, 3, &returnSize, &returnColumnSizes);

    printf("[");
    for (int i = 0; i < returnSize; i++) {
        printf("[");
        for (int j = 0; j < 3; j++) {
            printf("%d", result[i][j]);
            if (j < 2) {
                printf(",");
            }
        }
        printf("]");
        if (i < returnSize - 1) {
            printf(",");
        }
    }
    printf("]");

    return 0;
}

