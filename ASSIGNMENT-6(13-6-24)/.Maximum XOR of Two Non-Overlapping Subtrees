#include <stdio.h>
#include <stdlib.h>

#define MAX_NODES 50000

int values[MAX_NODES];
int tree[MAX_NODES][2];
int subtreeValues[MAX_NODES];
int result;

void dfs(int node, int parent) {
    subtreeValues[node] = values[node];
    for (int i = 0; i < 2; i++) {
        int child = tree[node][i];
        if (child != parent) {
            dfs(child, node);
            subtreeValues[node] += subtreeValues[child];
        }
    }
}

void findMaxScore(int n, int edges[][2], int values[], int valuesSize) {
    for (int i = 0; i < n - 1; i++) {
        int a = edges[i][0];
        int b = edges[i][1];
        tree[a][1] = b;
        tree[b][1] = a;
    }

    dfs(0, -1);

    result = 0;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            if (tree[i][1] != j && tree[j][1] != i) {
                result = (result > (subtreeValues[i] ^ subtreeValues[j])) ? result : (subtreeValues[i] ^ subtreeValues[j]);
            }
        }
    }

    printf("Maximum possible score: %d\n", result);
}

int main() {
    int n = 6;
    int edges[5][2] = {{0, 1}, {0, 2}, {1, 3}, {1, 4}, {2, 5}};
    int values[] = {2, 8, 3, 6, 2, 5};
    int valuesSize = sizeof(values) / sizeof(values[0]);

    findMaxScore(n, edges, values, valuesSize);

    return 0;
}
