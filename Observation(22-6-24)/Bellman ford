#include <stdio.h>
#include <stdlib.h>
#include <limits.h>

#define MAX_NODES 100
#define MAX_EDGES 100

struct Edge {
    int source, destination, weight;
};

struct Graph {
    int V, E;
    struct Edge edges[MAX_EDGES];
};

void BellmanFord(struct Graph* graph, int source);

int main() {
    struct Graph* graph = (struct Graph*)malloc(sizeof(struct Graph));
    graph->V = 5; // Number of vertices
    graph->E = 8; // Number of edges

    graph->edges[0].source = 0;
    graph->edges[0].destination = 1;
    graph->edges[0].weight = -1;

    graph->edges[1].source = 0;
    graph->edges[1].destination = 2;
    graph->edges[1].weight = 4;

    graph->edges[2].source = 1;
    graph->edges[2].destination = 2;
    graph->edges[2].weight = 3;

    graph->edges[3].source = 1;
    graph->edges[3].destination = 3;
    graph->edges[3].weight = 2;

    graph->edges[4].source = 1;
    graph->edges[4].destination = 4;
    graph->edges[4].weight = 2;

    graph->edges[5].source = 3;
    graph->edges[5].destination = 2;
    graph->edges[5].weight = 5;

    graph->edges[6].source = 3;
    graph->edges[6].destination = 1;
    graph->edges[6].weight = 1;

    graph->edges[7].source = 4;
    graph->edges[7].destination = 3;
    graph->edges[7].weight = -3;

    BellmanFord(graph, 0);

    free(graph);

    return 0;
}

void BellmanFord(struct Graph* graph, int source) {
    int V = graph->V;
    int E = graph->E;
    int dist[MAX_NODES];

    for (int i = 0; i < V; i++)
        dist[i] = INT_MAX;
    dist[source] = 0;

    for (int i = 1; i < V; i++) {
        for (int j = 0; j < E; j++) {
            int u = graph->edges[j].source;
            int v = graph->edges[j].destination;
            int weight = graph->edges[j].weight;
            if (dist[u] != INT_MAX && dist[u] + weight < dist[v])
                dist[v] = dist[u] + weight;
        }
    }

    for (int i = 0; i < E; i++) {
        int u = graph->edges[i].source;
        int v = graph->edges[i].destination;
        int weight = graph->edges[i].weight;
        if (dist[u] != INT_MAX && dist[u] + weight < dist[v])
            printf("Graph contains negative weight cycle");
    }

    printf("Vertex Distance from Source\n");
    for (int i = 0; i < V; i++)
        printf("%d\t\t%d\n", i, dist[i]);
}
