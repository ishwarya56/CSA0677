#include <stdio.h>
#include <stdlib.h>
#include <math.h>

// Structure to represent a point in 2D
struct Point {
    int x, y;
};

// Function to compute the Euclidean distance between two points
double distance(struct Point p1, struct Point p2) {
    return sqrt(pow(p1.x - p2.x, 2) + pow(p1.y - p2.y, 2));
}

// Function to find the closest pair of points using brute force
void closestPair(struct Point points[], int n) {
    if (n < 2) {
        printf("Not enough points to find a pair.\n");
        return;
    }

    struct Point closestP1, closestP2;
    double minDistance = _DBL_MAX_;

    // Compare every pair of points
    for (int i = 0; i < n - 1; i++) {
        for (int j = i + 1; j < n; j++) {
            double dist = distance(points[i], points[j]);
            if (dist < minDistance) {
                minDistance = dist;
                closestP1 = points[i];
                closestP2 = points[j];
            }
        }
    }

    // Print the closest pair and the minimum distance
    printf("Closest pair: (%d, %d) - (%d, %d)\n", closestP1.x, closestP1.y, closestP2.x, closestP2.y);
    printf("Minimum distance: %f\n", minDistance);
}

int main() {
    // Example points
    struct Point points[] = {{1, 2}, {4, 5}, {7, 8}, {3, 1}};
    int n = sizeof(points) / sizeof(points[0]);

    // Find closest pair using brute force
    closestPair(points, n);

    return 0;
}
