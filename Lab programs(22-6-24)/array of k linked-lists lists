#include <stdio.h>
#include <stdlib.h>

// Definition for singly-linked list.
struct ListNode {
    int val;
    struct ListNode *next;
};

// Function to create a new node
struct ListNode* createNode(int val) {
    struct ListNode* newNode = (struct ListNode*)malloc(sizeof(struct ListNode));
    newNode->val = val;
    newNode->next = NULL;
    return newNode;
}

// Function to merge k sorted linked lists
struct ListNode* mergeKLists(struct ListNode** lists, int listsSize) {
    // Create a dummy node to act as the head of the merged list
    struct ListNode* dummy = createNode(0);
    struct ListNode* current = dummy;

    // Min-heap using an array
    struct ListNode** heap = (struct ListNode*)malloc(listsSize * sizeof(struct ListNode));
    int heapSize = 0;

    // Add the first node of each list to the heap
    for (int i = 0; i < listsSize; i++) {
        if (lists[i]) {
            heap[heapSize++] = lists[i];
        }
    }

    // Function to heapify down
    void heapifyDown(int i) {
        int smallest = i;
        int left = 2 * i + 1;
        int right = 2 * i + 2;

        if (left < heapSize && heap[left]->val < heap[smallest]->val) {
            smallest = left;
        }
        if (right < heapSize && heap[right]->val < heap[smallest]->val) {
            smallest = right;
        }
        if (smallest != i) {
            struct ListNode* temp = heap[i];
            heap[i] = heap[smallest];
            heap[smallest] = temp;
            heapifyDown(smallest);
        }
    }

    // Function to heapify up
    void heapifyUp(int i) {
        int parent = (i - 1) / 2;
        if (i && heap[i]->val < heap[parent]->val) {
            struct ListNode* temp = heap[i];
            heap[i] = heap[parent];
            heap[parent] = temp;
            heapifyUp(parent);
        }
    }

    // Build the initial heap
    for (int i = heapSize / 2 - 1; i >= 0; i--) {
        heapifyDown(i);
    }

    // Process the heap until it's empty
    while (heapSize > 0) {
        // Get the smallest element
        struct ListNode* minNode = heap[0];
        current->next = minNode;
        current = current->next;

        // Move to the next element in the list
        if (minNode->next) {
            heap[0] = minNode->next;
        } else {
            heap[0] = heap[--heapSize];
        }

        // Heapify down the root
        heapifyDown(0);
    }

    struct ListNode* mergedList = dummy->next;
    free(dummy);
    free(heap);
    return mergedList;
}

// Function to print the linked list
void printList(struct ListNode* head) {
    while (head) {
        printf("%d ", head->val);
        head = head->next;
    }
    printf("\n");
}

// Main function to test the mergeKLists function
int main() {
    // Create sample linked lists
    struct ListNode* list1 = createNode(1);
    list1->next = createNode(4);
    list1->next->next = createNode(5);

    struct ListNode* list2 = createNode(1);
    list2->next = createNode(3);
    list2->next->next = createNode(4);

    struct ListNode* list3 = createNode(2);
    list3->next = createNode(6);

    struct ListNode* lists[] = {list1, list2, list3};

    // Merge the linked lists
    struct ListNode* mergedList = mergeKLists(lists, 3);

    // Print the merged linked list
    printList(mergedList);

    return 0;
}
