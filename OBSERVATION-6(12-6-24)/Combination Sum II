#include <stdio.h>
#include <stdlib.h>

// Function to compare two integers (used for sorting)
int compare(const void *a, const void *b) {
    return (*(int *)a - *(int *)b);
}

// Function to print a combination
void printCombination(int *combination, int size) {
    printf("[");
    for (int i = 0; i < size; i++) {
        if (i > 0) printf(",");
        printf("%d", combination[i]);
    }
    printf("]\n");
}

// Recursive function to find all unique combinations
void findCombinations(int *candidates, int candidatesSize, int target, int *combination, int combSize, int start) {
    if (target == 0) {
        printCombination(combination, combSize);
        return;
    }

    for (int i = start; i < candidatesSize; i++) {
        // Skip duplicates
        if (i > start && candidates[i] == candidates[i - 1]) continue;
        if (candidates[i] <= target) {
            combination[combSize] = candidates[i];
            findCombinations(candidates, candidatesSize, target - candidates[i], combination, combSize + 1, i + 1);
        }
    }
}

// Main function to solve the problem
void combinationSum2(int *candidates, int candidatesSize, int target) {
    // Sort the array to handle duplicates
    qsort(candidates, candidatesSize, sizeof(int), compare);
    int *combination = (int *)malloc(target * sizeof(int));
    findCombinations(candidates, candidatesSize, target, combination, 0, 0);
    free(combination);
}

// Example usage
int main() {
    int candidates1[] = {10, 1, 2, 7, 6, 1, 5};
    int target1 = 8;
    printf("Combinations for target = %d:\n", target1);
    combinationSum2(candidates1, sizeof(candidates1) / sizeof(candidates1[0]), target1);

    int candidates2[] = {2, 5, 2, 1, 2};
    int target2 = 5;
    printf("\nCombinations for target = %d:\n", target2);
    combinationSum2(candidates2, sizeof(candidates2) / sizeof(candidates2[0]), target2);

    return 0;
}
