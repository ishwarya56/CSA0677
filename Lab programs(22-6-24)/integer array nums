#include <stdio.h>
#include <stdlib.h>

// Comparator function for qsort
int cmp(const void *a, const void *b) {
    return (*(int *)a - *(int *)b);
}

// Function to reorder the array in the specified wiggle pattern
void wiggleSort(int* nums, int numsSize) {
    int* sorted = (int*)malloc(numsSize * sizeof(int));
    for (int i = 0; i < numsSize; i++) {
        sorted[i] = nums[i];
    }

    qsort(sorted, numsSize, sizeof(int), cmp);

    int mid = (numsSize + 1) / 2;
    int end = numsSize;
    
    for (int i = 0, j = mid - 1, k = numsSize - 1; i < numsSize; i++) {
        nums[i] = (i % 2 == 0) ? sorted[j--] : sorted[k--];
    }
    
    free(sorted);
}

int main() {
    int nums1[] = {1, 5, 1, 1, 6, 4};
    int size1 = sizeof(nums1) / sizeof(nums1[0]);

    wiggleSort(nums1, size1);
    
    printf("Output: ");
    for (int i = 0; i < size1; i++) {
        printf("%d ", nums1[i]);
    }
    printf("\n");

    int nums2[] = {1, 3, 2, 2, 3, 1};
    int size2 = sizeof(nums2) / sizeof(nums2[0]);

    wiggleSort(nums2, size2);
    
    printf("Output: ");
    for (int i = 0; i < size2; i++) {
        printf("%d ", nums2[i]);
    }
    printf("\n");

    return 0;
}
