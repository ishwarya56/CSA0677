#include <stdio.h>
#include <stdlib.h>
#include <math.h>

// Structure to represent a point
typedef struct {
    int x;
    int y;
    double distance;
} Point;

// Function to calculate the distance from the origin
double calculateDistance(int x, int y) {
    return sqrt(x * x + y * y);
}

// Comparison function for qsort
int compare(const void *a, const void *b) {
    Point *pointA = (Point *)a;
    Point *pointB = (Point *)b;
    return (pointA->distance > pointB->distance) - (pointA->distance < pointB->distance);
}

// Function to find the k closest points to the origin
void kClosestPoints(Point points[], int n, int k) {
    // Calculate distances from the origin
    for (int i = 0; i < n; i++) {
        points[i].distance = calculateDistance(points[i].x, points[i].y);
    }

    // Sort the points by distance using qsort
    qsort(points, n, sizeof(Point), compare);

    // Print the k closest points
    printf("The %d closest points to the origin are:\n", k);
    for (int i = 0; i < k; i++) {
        printf("[%d, %d]\n", points[i].x, points[i].y);
    }
}

int main() {
    // Test case 1
    Point points1[] = {{1, 3}, {-2, 2}, {5, 8}, {0, 1}};
    int k1 = 2;
    int n1 = sizeof(points1) / sizeof(points1[0]);
    printf("Test Case 1:\n");
    kClosestPoints(points1, n1, k1);
    printf("\n");

    // Test case 2
    Point points2[] = {{1, 3}, {-2, 2}};
    int k2 = 1;
    int n2 = sizeof(points2) / sizeof(points2[0]);
    printf("Test Case 2:\n");
    kClosestPoints(points2, n2, k2);
    printf("\n");

    // Test case 3
    Point points3[] = {{3, 3}, {5, -1}, {-2, 4}};
    int k3 = 2;
    int n3 = sizeof(points3) / sizeof(points3[0]);
    printf("Test Case 3:\n");
    kClosestPoints(points3, n3, k3);
    printf("\n");

    return 0;
}
