include <stdio.h>
#include <stdlib.h>
#include <limits.h>

#define V 5 // Number of vertices in the graph
#define E 5 // Number of edges in the graph

// Structure to represent an edge in the graph
struct Edge {
    int src, dest, weight;
};

// Structure to represent a subset for union-find
struct subset {
    int parent;
    int rank;
};

// Function to find set of an element i (uses path compression technique)
int find(struct subset subsets[], int i) {
    // Find root and make root as parent of i (path compression)
    if (subsets[i].parent != i)
        subsets[i].parent = find(subsets, subsets[i].parent);

    return subsets[i].parent;
}

// A function that does union of two sets of x and y (uses union by rank)
void Union(struct subset subsets[], int x, int y) {
    int xroot = find(subsets, x);
    int yroot = find(subsets, y);

    // Attach smaller rank tree under root of high rank tree (Union by Rank)
    if (subsets[xroot].rank < subsets[yroot].rank)
        subsets[xroot].parent = yroot;
    else if (subsets[xroot].rank > subsets[yroot].rank)
        subsets[yroot].parent = xroot;
    else {
        subsets[yroot].parent = xroot;
        subsets[xroot].rank++;
    }
}

// Function to find the Minimum Spanning Tree (MST) using Boruvka's algorithm
void boruvkaMST(struct Edge edges[]) {
    struct subset* subsets = (struct subset*)malloc(V * sizeof(struct subset));
    struct Edge* cheapest = (struct Edge*)malloc(V * sizeof(struct Edge));

    // Allocate memory for creating V subsets
    for (int v = 0; v < V; v++) {
        subsets[v].parent = v;
        subsets[v].rank = 0;
        cheapest[v].src = -1;
        cheapest[v].dest = -1;
        cheapest[v].weight = INT_MAX;
    }

    int numTrees = V;
    int MSTweight = 0;
    while (numTrees > 1) {
        // Traverse through all edges and update the cheapest of every component
        for (int i = 0; i < E; i++) {
            int set1 = find(subsets, edges[i].src);
            int set2 = find(subsets, edges[i].dest);

            if (set1 != set2) {
                if (cheapest[set1].weight == INT_MAX || edges[i].weight < cheapest[set1].weight)
                    cheapest[set1] = edges[i];

                if (cheapest[set2].weight == INT_MAX || edges[i].weight < cheapest[set2].weight)
                    cheapest[set2] = edges[i];
            }
        }

        // Add the cheapest edges to MST
        for (int i = 0; i < V; i++) {
            if (cheapest[i].src != -1) {
                int set1 = find(subsets, cheapest[i].src);
                int set2 = find(subsets, cheapest[i].dest);

                if (set1 != set2) {
                    printf("Edge %d-%d included in MST\n", cheapest[i].src, cheapest[i].dest);
                    MSTweight += cheapest[i].weight;
                    Union(subsets, set1, set2);
                    numTrees--;
                }
            }
        }

        // Reset cheapest array for the next iteration
        for (int i = 0; i < V; i++) {
            cheapest[i].src = -1;
            cheapest[i].dest = -1;
            cheapest[i].weight = INT_MAX;
        }
    }

    printf("Weight of MST: %d\n", MSTweight);

    free(subsets);
    free(cheapest);
}

int main() {
    struct Edge edges[] = {
        // src, dest, weight
        {0, 1, 10},
        {0, 2, 6},
        {0, 3, 5},
        {1, 3, 15},
        {2, 3, 4}
    };

    // Call Boruvka's algorithm
    boruvkaMST(edges);

    return 0;
}
