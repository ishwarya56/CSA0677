#include <stdio.h>
#include <stdlib.h>
#include <math.h>

typedef struct {
    int x;
    int y;
    double distance;
} Point;

int compare(const void* a, const void* b) {
    Point* pointA = (Point*)a;
    Point* pointB = (Point*)b;
    return (pointA->distance > pointB->distance) - (pointA->distance < pointB->distance);
}

void kClosest(int points[][2], int pointsSize, int k, int result[][2]) {
    Point* pointArr = (Point*)malloc(pointsSize * sizeof(Point));
    for (int i = 0; i < pointsSize; i++) {
        pointArr[i].x = points[i][0];
        pointArr[i].y = points[i][1];
        pointArr[i].distance = sqrt(points[i][0] * points[i][0] + points[i][1] * points[i][1]);
    }

    qsort(pointArr, pointsSize, sizeof(Point), compare);

    for (int i = 0; i < k; i++) {
        result[i][0] = pointArr[i].x;
        result[i][1] = pointArr[i].y;
    }

    free(pointArr);
}

int main() {
    int points[][2] = {{1, 3}, {-2, 2}, {5, 8}, {0, 1}};
    int pointsSize = sizeof(points) / sizeof(points[0]);
    int k = 2;
    int result[k][2];

    kClosest(points, pointsSize, k, result);

    printf("The %d closest points to the origin are:\n", k);
    for (int i = 0; i < k; i++) {
        printf("[%d, %d]\n", result[i][0], result[i][1]);
    }

    return 0;
}
