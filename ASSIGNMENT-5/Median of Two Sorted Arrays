#include <stdio.h>
#include <limits.h>

double findMedianSortedArrays(int* nums1, int nums1Size, int* nums2, int nums2Size) {
    if (nums1Size > nums2Size) {
        return findMedianSortedArrays(nums2, nums2Size, nums1, nums1Size);
    }

    int low = 0;
    int high = nums1Size;
    int totalLength = nums1Size + nums2Size;
    int partitionLength = (totalLength + 1) / 2;

    while (low <= high) {
        int partitionX = (low + high) / 2;
        int partitionY = partitionLength - partitionX;

        int maxX = (partitionX == 0) ? INT_MIN : nums1[partitionX - 1];
        int minX = (partitionX == nums1Size) ? INT_MAX : nums1[partitionX];
        int maxY = (partitionY == 0) ? INT_MIN : nums2[partitionY - 1];
        int minY = (partitionY == nums2Size) ? INT_MAX : nums2[partitionY];

        if (maxX <= minY && maxY <= minX) {
            if (totalLength % 2 == 0) {
                return (double)(fmax(maxX, maxY) + fmin(minX, minY)) / 2;
            } else {
                return (double)fmax(maxX, maxY);
            }
        } else if (maxX > minY) {
            high = partitionX - 1;
        } else {
            low = partitionX + 1;
        }
    }

    return -1; // Should not reach here
}

// Example usage
int main() {
    int nums1[] = {1, 3};
    int nums2[] = {2};
    double median1 = findMedianSortedArrays(nums1, 2, nums2, 1);
    printf("Output: %.5f\n", median1); // Output: 2.00000

    int nums3[] = {1, 2};
    int nums4[] = {3, 4};
    double median2 = findMedianSortedArrays(nums3, 2, nums4, 2);
    printf("Output: %.5f\n", median2); // Output: 2.50000

    return 0;
}
