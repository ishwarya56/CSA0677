#include <stdio.h>
#include <stdlib.h>
#include <limits.h>

// Function to compare two integers for qsort
int compare(const void* a, const void* b) {
    return ((int)a - (int)b);
}

// Binary search helper function to find the smallest element greater than target
int upperBound(int* arr, int size, int target) {
    int left = 0, right = size;
    while (left < right) {
        int mid = left + (right - left) / 2;
        if (arr[mid] <= target)
            left = mid + 1;
        else
            right = mid;
    }
    return left;
}

// Function to make arr1 strictly increasing with minimum operations
int minOperations(int* arr1, int arr1Size, int* arr2, int arr2Size) {
    qsort(arr2, arr2Size, sizeof(int), compare);

    // DP array where dp[i][j] holds the minimum value of arr1[i] with j replacements to keep the array strictly increasing
    int dp[arr1Size][arr1Size + 1];
    for (int i = 0; i < arr1Size; i++)
        for (int j = 0; j <= arr1Size; j++)
            dp[i][j] = INT_MAX;

    // Initial population of dp array for the first element of arr1
    dp[0][0] = arr1[0];
    for (int j = 1; j <= arr1Size; j++) {
        int pos = upperBound(arr2, arr2Size, arr1[0]);
        if (pos >= j) dp[0][j] = arr2[j-1];
    }

    // Fill the DP array
    for (int i = 1; i < arr1Size; i++) {
        for (int j = 0; j <= i + 1; j++) {
            // No replacement
            if (dp[i-1][j] < arr1[i])
                dp[i][j] = arr1[i];

            // With replacement
            if (j > 0 && dp[i-1][j-1] < dp[i][j]) {
                int pos = upperBound(arr2, arr2Size, dp[i-1][j-1]);
                if (pos >= j) dp[i][j] = arr2[j-1];
            }
        }
    }

    // Find the result in the last row of the DP array
    for (int j = 0; j <= arr1Size; j++) {
        if (dp[arr1Size-1][j] != INT_MAX)
            return j;
    }

    return -1;
}

int main() {
    int arr1[] = {1, 5, 3, 6, 7};
    int arr1Size = sizeof(arr1) / sizeof(arr1[0]);
    int arr2[] = {1, 3, 2, 4};
    int arr2Size = sizeof(arr2) / sizeof(arr2[0]);

    int result = minOperations(arr1, arr1Size, arr2, arr2Size);
    printf("Minimum number of operations: %d\n", result);

    return 0;
}
