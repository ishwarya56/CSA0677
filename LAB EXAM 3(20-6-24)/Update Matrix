#include <stdio.h>
#include <stdlib.h>
#include <limits.h>

#define MAX_QUEUE_SIZE 10000

typedef struct {
    int x, y;
} Point;

typedef struct {
    Point data[MAX_QUEUE_SIZE];
    int front, rear;
} Queue;

void enqueue(Queue *q, int x, int y) {
    if ((q->rear + 1) % MAX_QUEUE_SIZE == q->front) {
        // Queue is full
        return;
    }
    q->data[q->rear].x = x;
    q->data[q->rear].y = y;
    q->rear = (q->rear + 1) % MAX_QUEUE_SIZE;
}

Point dequeue(Queue *q) {
    Point p = { -1, -1 };
    if (q->front != q->rear) {
        p = q->data[q->front];
        q->front = (q->front + 1) % MAX_QUEUE_SIZE;
    }
    return p;
}

int isEmpty(Queue *q) {
    return q->front == q->rear;
}

void updateMatrix(int** mat, int matSize, int* matColSize) {
    int directions[4][2] = { {0, 1}, {1, 0}, {0, -1}, {-1, 0} };
    int rows = matSize;
    int cols = matColSize[0];

    int** dist = (int*)malloc(rows * sizeof(int));
    for (int i = 0; i < rows; i++) {
        dist[i] = (int*)malloc(cols * sizeof(int));
        for (int j = 0; j < cols; j++) {
            dist[i][j] = (mat[i][j] == 0) ? 0 : INT_MAX;
        }
    }

    Queue q;
    q.front = q.rear = 0;

    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            if (mat[i][j] == 0) {
                enqueue(&q, i, j);
            }
        }
    }

    while (!isEmpty(&q)) {
        Point p = dequeue(&q);
        for (int i = 0; i < 4; i++) {
            int newRow = p.x + directions[i][0];
            int newCol = p.y + directions[i][1];
            if (newRow >= 0 && newRow < rows && newCol >= 0 && newCol < cols) {
                if (dist[newRow][newCol] > dist[p.x][p.y] + 1) {
                    dist[newRow][newCol] = dist[p.x][p.y] + 1;
                    enqueue(&q, newRow, newCol);
                }
            }
        }
    }

    // Print the result
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            printf("%d ", dist[i][j]);
        }
        printf("\n");
        free(dist[i]);
    }
    free(dist);
}

int main() {
    int mat1[][3] = { {0, 0, 0}, {0, 1, 0}, {0, 0, 0} };
    int* mat1Ptr[] = { mat1[0], mat1[1], mat1[2] };
    int mat1Size = 3;
    int mat1ColSize[] = { 3, 3, 3 };

    printf("Output for mat1:\n");
    updateMatrix(mat1Ptr, mat1Size, mat1ColSize);

    int mat2[][3] = { {0, 0, 0}, {0, 1, 0}, {1, 1, 1} };
    int* mat2Ptr[] = { mat2[0], mat2[1], mat2[2] };
    int mat2Size = 3;
    int mat2ColSize[] = { 3, 3, 3 };

    printf("Output for mat2:\n");
    updateMatrix(mat2Ptr, mat2Size, mat2ColSize);

    return 0;
}
