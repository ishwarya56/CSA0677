#include <stdio.h>
#include <stdlib.h>

// Function to find the index of the given value in the array
int findIndex(int* nums, int n, int value) {
    for (int i = 0; i < n; i++) {
        if (nums[i] == value) {
            return i;
        }
    }
    return -1; // This should never happen given the problem constraints
}

// Function to perform the sorting with minimum operations
int minOperationsToSort(int* nums, int n) {
    int operations = 0;
    int emptyIndex = findIndex(nums, n, 0);
    
    for (int i = 0; i < n; i++) {
        while (nums[i] != i) {
            int targetIndex = nums[i];
            // Swap nums[emptyIndex] with nums[targetIndex]
            nums[emptyIndex] = nums[targetIndex];
            nums[targetIndex] = 0;
            emptyIndex = targetIndex;
            operations++;
        }
    }
    
    // Check if the empty space (0) needs to be moved to the end
    if (emptyIndex != 0 && emptyIndex != n - 1) {
        if (emptyIndex != n - 1) {
            // Move the empty space to the end
            nums[emptyIndex] = nums[n - 1];
            nums[n - 1] = 0;
            operations++;
        }
    }
    
    return operations;
}

// Example usage
int main() {
    int nums[] = {4, 2, 0, 3, 1};
    int n = sizeof(nums) / sizeof(nums[0]);

    int result = minOperationsToSort(nums, n);

    printf("Minimum number of operations needed: %d\n", result);

    return 0;
}
