#include <stdio.h>

// Structure to represent a point in 2D
struct Point {
    int x, y;
};

// Function to find the convex hull using a brute-force approach
void convexHull(struct Point points[], int n) {
    if (n < 3) {
        printf("Convex hull not possible with less than 3 points.\n");
        return;
    }

    // Initialize an array to store the convex hull points
    int hullPoints[n];
    int hullSize = 0;

    // Iterate through all pairs of points
    for (int i = 0; i < n; i++) {
        for (int j = i + 1; j < n; j++) {
            // Assume the current pair of points form the hull
            int isHull = 1;
            // Iterate through all other points to check if they are on the left or right
            for (int k = 0; k < n; k++) {
                if (k == i || k == j) continue; // Skip the current pair
                // Calculate the cross product to determine the position of the point
                int crossProduct = (points[j].x - points[i].x) * (points[k].y - points[i].y)
                                   - (points[j].y - points[i].y) * (points[k].x - points[i].x);
                // If crossProduct is positive, point k is on the left of line segment P[i]P[j]
                // If crossProduct is negative, point k is on the right
                // If crossProduct is zero, point k is collinear with line segment P[i]P[j]
                if (crossProduct < 0) {
                    isHull = 0;
                    break;
                }
            }
            // If all points are on one side, add points i and j to the convex hull
            if (isHull) {
                hullPoints[hullSize++] = i;
                hullPoints[hullSize++] = j;
            }
        }
    }

    // Print the convex hull points in counter-clockwise order
    printf("Convex Hull:\n");
    for (int i = 0; i < hullSize; i++) {
        printf("(%d, %d)", points[hullPoints[i]].x, points[hullPoints[i]].y);
        if (i < hullSize - 1) {
            printf(" -> ");
        }
    }
    printf("\n");
}

int main() {
    // Example points
    struct Point points[] = {{1, 1}, {4, 6}, {8, 1}, {0, 0}, {3, 3}};
    int n = sizeof(points) / sizeof(points[0]);

    // Find convex hull using brute-force approach
    convexHull(points, n);

    return 0;
}
