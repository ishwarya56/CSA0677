#include <stdio.h>
#include <limits.h>

// Function to calculate total cost for a given assignment
int total_cost(int assignment[], int cost_matrix[][3], int num_workers) {
    int total = 0;
    for (int i = 0; i < num_workers; i++) {
        total += cost_matrix[i][assignment[i]];
    }
    return total;
}

// Function to perform assignment problem using brute-force approach
void assignment_problem(int cost_matrix[][3], int num_workers) {
    // Initialize variables to store optimal assignment and minimum cost
    int min_cost = INT_MAX;
    int *optimal_assignment = NULL;
    
    // Generate all permutations of worker indices
    int perm_count = 1;
    for (int i = 2; i <= num_workers; i++) {
        perm_count *= i;
    }
    
    // Allocate memory for current assignment
    int *current_assignment = (int *)malloc(num_workers * sizeof(int));
    
    // Loop through all permutations
    for (int i = 0; i < perm_count; i++) {
        // Create a permutation of worker indices
        int perm_index = i;
        for (int j = 0; j < num_workers; j++) {
            current_assignment[j] = j;
        }
        
        // Calculate total cost for the current assignment
        int current_cost = total_cost(current_assignment, cost_matrix, num_workers);
        
        // Check if current assignment gives a lower cost
        if (current_cost < min_cost) {
            min_cost = current_cost;
            // Update the optimal assignment found
            if (optimal_assignment == NULL) {
                optimal_assignment = (int *)malloc(num_workers * sizeof(int));
            }
            for (int j = 0; j < num_workers; j++) {
                optimal_assignment[j] = current_assignment[j];
            }
        }
        
        // Generate next permutation using std::next_permutation
        if (!next_permutation(current_assignment, current_assignment + num_workers)) {
            break;
        }
    }
    
    // Output the optimal assignment and minimum cost
    printf("Optimal Assignment:\n");
    for (int i = 0; i < num_workers; i++) {
        printf("(worker %d, task %d)", i + 1, optimal_assignment[i] + 1);
        if (i < num_workers - 1) {
            printf(", ");
        }
    }
    printf("\nTotal Cost: %d\n", min_cost);
    
    // Free dynamically allocated memory
    free(current_assignment);
    free(optimal_assignment);
}

int main() {
    // Test Case 1: Simple Case
    int cost_matrix1[][3] = {
        {3, 10, 7},
        {8, 5, 12},
        {4, 6, 9}
    };
    int num_workers1 = 3;
    assignment_problem(cost_matrix1, num_workers1);
    
    // Test Case 2: More Complex Case
    int cost_matrix2[][3] = {
        {15, 9, 4},
        {8, 7, 18},
        {6, 12, 11}
    };
    int num_workers2 = 3;
    assignment_problem(cost_matrix2, num_workers2);
    
    return 0;
}
