#include <stdio.h>
#include <stdlib.h>

// Definition for a binary tree node.
struct TreeNode {
    int val;
    struct TreeNode *left;
    struct TreeNode *right;
};

// Function to create a new tree node
struct TreeNode* createTreeNode(int val) {
    struct TreeNode* node = (struct TreeNode*)malloc(sizeof(struct TreeNode));
    node->val = val;
    node->left = NULL;
    node->right = NULL;
    return node;
}

// Function to find the index of the maximum value in the array
int findMaxIndex(int* nums, int start, int end) {
    int maxIndex = start;
    for (int i = start + 1; i <= end; i++) {
        if (nums[i] > nums[maxIndex]) {
            maxIndex = i;
        }
    }
    return maxIndex;
}

// Recursive function to build the maximum binary tree
struct TreeNode* constructMaximumBinaryTree(int* nums, int start, int end) {
    if (start > end) {
        return NULL;
    }

    int maxIndex = findMaxIndex(nums, start, end);
    struct TreeNode* root = createTreeNode(nums[maxIndex]);
    root->left = constructMaximumBinaryTree(nums, start, maxIndex - 1);
    root->right = constructMaximumBinaryTree(nums, maxIndex + 1, end);

    return root;
}

// Function to print the tree in pre-order traversal
void preOrderTraversal(struct TreeNode* root) {
    if (root == NULL) {
        return;
    }
    printf("%d ", root->val);
    preOrderTraversal(root->left);
    preOrderTraversal(root->right);
}

int main() {
    int nums[] = {3, 2, 1, 6, 0, 5};
    int numsSize = sizeof(nums) / sizeof(nums[0]);

    struct TreeNode* root = constructMaximumBinaryTree(nums, 0, numsSize - 1);

    printf("Pre-order traversal of the constructed Maximum Binary Tree:\n");
    preOrderTraversal(root);
    printf("\n");

    return 0;
}
