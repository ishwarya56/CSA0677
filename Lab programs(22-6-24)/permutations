#include <stdio.h>
#include <stdlib.h>

// Function to update the Fenwick Tree (Binary Indexed Tree)
void update(int* BIT, int index, int val, int n) {
    while (index < n) {
        BIT[index] += val;
        index += (index & -index);
    }
}

// Function to get the prefix sum from the Fenwick Tree (Binary Indexed Tree)
int getSum(int* BIT, int index) {
    int sum = 0;
    while (index > 0) {
        sum += BIT[index];
        index -= (index & -index);
    }
    return sum;
}

// Function to count the number of good triplets
long long countGoodTriplets(int* nums1, int* nums2, int n) {
    int* pos1 = (int*)malloc(n * sizeof(int));
    int* pos2 = (int*)malloc(n * sizeof(int));

    // Create position arrays for nums1 and nums2
    for (int i = 0; i < n; i++) {
        pos1[nums1[i]] = i;
        pos2[nums2[i]] = i;
    }

    // Arrays to store the number of elements satisfying the conditions
    int* BIT = (int*)calloc(n + 1, sizeof(int));
    int* lessCount = (int*)calloc(n, sizeof(int));
    int* greaterCount = (int*)calloc(n, sizeof(int));

    // Calculate lessCount using BIT
    for (int i = 0; i < n; i++) {
        int idx = pos2[nums1[i]] + 1;
        lessCount[i] = getSum(BIT, idx - 1);
        update(BIT, idx, 1, n + 1);
    }

    // Reset the BIT array for reuse
    for (int i = 0; i < n + 1; i++) {
        BIT[i] = 0;
    }

    // Calculate greaterCount using BIT
    for (int i = n - 1; i >= 0; i--) {
        int idx = pos2[nums1[i]] + 1;
        greaterCount[i] = getSum(BIT, n) - getSum(BIT, idx);
        update(BIT, idx, 1, n + 1);
    }

    // Calculate the total number of good triplets
    long long count = 0;
    for (int i = 0; i < n; i++) {
        count += (long long)lessCount[i] * greaterCount[i];
    }

    // Free allocated memory
    free(pos1);
    free(pos2);
    free(BIT);
    free(lessCount);
    free(greaterCount);

    return count;
}

// Main function to test the countGoodTriplets function
int main() {
    int nums1[] = {2, 0, 1, 3};
    int nums2[] = {0, 1, 2, 3};
    int n = sizeof(nums1) / sizeof(nums1[0]);

    long long result = countGoodTriplets(nums1, nums2, n);
    printf("Total number of good triplets: %lld\n", result);

    return 0;
}
