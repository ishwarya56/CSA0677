#include <stdio.h>
#include <stdlib.h>

// Definition of a TreeNode
struct TreeNode {
    int val;
    struct TreeNode *left;
    struct TreeNode *right;
};

// Utility function to create a new tree node
struct TreeNode* createNode(int val) {
    struct TreeNode* node = (struct TreeNode*)malloc(sizeof(struct TreeNode));
    node->val = val;
    node->left = NULL;
    node->right = NULL;
    return node;
}

// Function to find the height of the tree
int findHeight(struct TreeNode* root) {
    if (root == NULL) {
        return -1; // height of empty tree is -1
    }
    int leftHeight = findHeight(root->left);
    int rightHeight = findHeight(root->right);
    return 1 + (leftHeight > rightHeight ? leftHeight : rightHeight);
}

// Function to find the node with given value in the tree
struct TreeNode* findNode(struct TreeNode* root, int val) {
    if (root == NULL || root->val == val) {
        return root;
    }
    struct TreeNode* leftResult = findNode(root->left, val);
    if (leftResult != NULL) {
        return leftResult;
    }
    return findNode(root->right, val);
}

// Function to perform the queries
void performQueries(struct TreeNode* root, int* queries, int m, int* answer) {
    for (int i = 0; i < m; i++) {
        struct TreeNode* nodeToRemove = findNode(root, queries[i]);
        if (nodeToRemove != NULL) {
            // Temporarily remove the subtree rooted at nodeToRemove
            struct TreeNode* originalLeft = nodeToRemove->left;
            struct TreeNode* originalRight = nodeToRemove->right;
            nodeToRemove->left = NULL;
            nodeToRemove->right = NULL;
            
            // Calculate the height of the tree
            answer[i] = findHeight(root);
            
            // Restore the subtree
            nodeToRemove->left = originalLeft;
            nodeToRemove->right = originalRight;
        }
    }
}

// Example usage
int main() {
    // Creating a sample tree
    struct TreeNode* root = createNode(1);
    root->left = createNode(2);
    root->right = createNode(3);
    root->left->left = createNode(4);
    root->left->right = createNode(5);
    root->right->left = createNode(6);
    root->right->right = createNode(7);

    // Queries array
    int queries[] = {2, 3, 4};
    int m = sizeof(queries) / sizeof(queries[0]);
    int answer[m];

    // Perform the queries
    performQueries(root, queries, m, answer);

    // Print the results
    for (int i = 0; i < m; i++) {
        printf("Height after removing subtree rooted at %d: %d\n", queries[i], answer[i]);
    }

    // Freeing the allocated memory (not shown here for brevity)
    return 0;
}
