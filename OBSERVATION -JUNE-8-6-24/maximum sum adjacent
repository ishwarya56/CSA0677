#include <stdio.h>
#include <stdlib.h>

#define MOD 1000000007

// Function to calculate the maximum sum of a subsequence where no two adjacent elements are selected
long long maxNonAdjacentSum(int* nums, int numsSize) {
    if (numsSize == 0) return 0;
    if (numsSize == 1) return nums[0];

    long long prev1 = nums[0];
    long long prev2 = 0;

    for (int i = 1; i < numsSize; i++) {
        long long current = nums[i];
        long long newPrev1 = (prev2 + current > prev1) ? prev2 + current : prev1;
        prev2 = prev1;
        prev1 = newPrev1;
    }

    return prev1;
}

int main() {
    int nums[] = {3, 2, 5, 10, 7};
    int numsSize = sizeof(nums) / sizeof(nums[0]);
    
    int queries[][2] = {{1, 8}, {0, 4}, {3, 6}};
    int queriesSize = sizeof(queries) / sizeof(queries[0]);

    long long result = 0;

    for (int i = 0; i < queriesSize; i++) {
        int posi = queries[i][0];
        int xi = queries[i][1];

        nums[posi] = xi;

        long long currentMaxSum = maxNonAdjacentSum(nums, numsSize) % MOD;
        result = (result + currentMaxSum) % MOD;
    }

    printf("Sum of the answers to all queries modulo %d: %lld\n", MOD, result);

    return 0;
}
